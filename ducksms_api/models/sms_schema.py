# coding: utf-8

"""
    Ducksms

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducksms.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ducksms_api.configuration import Configuration


class SmsSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'preview': 'str',
        'mobile_numbers': 'list[str]',
        'message': 'str',
        'sender_id': 'str',
        'scheduled_at': 'str',
        'callback_url': 'str'
    }

    attribute_map = {
        'preview': 'preview',
        'mobile_numbers': 'mobile_numbers',
        'message': 'message',
        'sender_id': 'sender_id',
        'scheduled_at': 'scheduled_at',
        'callback_url': 'callback_url'
    }

    def __init__(self, preview=None, mobile_numbers=None, message=None, sender_id=None, scheduled_at=None, callback_url=None, local_vars_configuration=None):  # noqa: E501
        """SmsSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._preview = None
        self._mobile_numbers = None
        self._message = None
        self._sender_id = None
        self._scheduled_at = None
        self._callback_url = None
        self.discriminator = None

        if preview is not None:
            self.preview = preview
        self.mobile_numbers = mobile_numbers
        self.message = message
        self.sender_id = sender_id
        self.scheduled_at = scheduled_at
        self.callback_url = callback_url

    @property
    def preview(self):
        """Gets the preview of this SmsSchema.  # noqa: E501

        Preview the sms information  # noqa: E501

        :return: The preview of this SmsSchema.  # noqa: E501
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this SmsSchema.

        Preview the sms information  # noqa: E501

        :param preview: The preview of this SmsSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes", "no"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and preview not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `preview` ({0}), must be one of {1}"  # noqa: E501
                .format(preview, allowed_values)
            )

        self._preview = preview

    @property
    def mobile_numbers(self):
        """Gets the mobile_numbers of this SmsSchema.  # noqa: E501


        :return: The mobile_numbers of this SmsSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._mobile_numbers

    @mobile_numbers.setter
    def mobile_numbers(self, mobile_numbers):
        """Sets the mobile_numbers of this SmsSchema.


        :param mobile_numbers: The mobile_numbers of this SmsSchema.  # noqa: E501
        :type: list[str]
        """

        self._mobile_numbers = mobile_numbers

    @property
    def message(self):
        """Gets the message of this SmsSchema.  # noqa: E501


        :return: The message of this SmsSchema.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SmsSchema.


        :param message: The message of this SmsSchema.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def sender_id(self):
        """Gets the sender_id of this SmsSchema.  # noqa: E501


        :return: The sender_id of this SmsSchema.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this SmsSchema.


        :param sender_id: The sender_id of this SmsSchema.  # noqa: E501
        :type: str
        """

        self._sender_id = sender_id

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this SmsSchema.  # noqa: E501


        :return: The scheduled_at of this SmsSchema.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this SmsSchema.


        :param scheduled_at: The scheduled_at of this SmsSchema.  # noqa: E501
        :type: str
        """

        self._scheduled_at = scheduled_at

    @property
    def callback_url(self):
        """Gets the callback_url of this SmsSchema.  # noqa: E501


        :return: The callback_url of this SmsSchema.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this SmsSchema.


        :param callback_url: The callback_url of this SmsSchema.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmsSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmsSchema):
            return True

        return self.to_dict() != other.to_dict()
